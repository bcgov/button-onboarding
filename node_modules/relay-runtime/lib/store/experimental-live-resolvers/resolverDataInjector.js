/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */

'use strict';

var _require = require('../ResolverFragments'),
  readFragment = _require.readFragment;
var invariant = require('invariant');

/**
 *
 * This a High order function that returns a relay resolver that can read the data for
 * the fragment`.
 *
 * - fragment: contains fragment Reader AST with resolver's data dependencies.
 * - resolverFn: original resolver function that expects a data from the fragment
 * - (optional) fieldName: individual field that needs to be read out of the fragment.
 *
 * This will not call the `resolverFn` if the fragment data for it is null/undefined.
 * The the compiler generates calls to this function, ensuring the correct set of arguments.
 */
function resolverDataInjector(fragment, resolverFn, fieldName, isRequiredField) {
  return function (fragmentKey, args) {
    var data = readFragment(fragment, fragmentKey);
    if (fieldName != null) {
      if (data == null) {
        if (isRequiredField === true) {
          !false ? process.env.NODE_ENV !== "production" ? invariant(false, 'Expected required resolver field `%` to be present. But resolvers fragment data is null/undefined.', fieldName) : invariant(false) : void 0;
        } else {
          return resolverFn(null, args);
        }
      }

      // If `fieldName` is defined, the resolver expects only
      // the data for this field.
      if (fieldName in data) {
        if (isRequiredField === true) {
          !(data[fieldName] != null) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Expected required resolver field `%` to be non-null.') : invariant(false) : void 0;
        }
        return resolverFn(data[fieldName], args);
      } else {
        // If both `data` and `fieldName` is available, we expect the
        // `fieldName` field in the `data` object.
        !false ? process.env.NODE_ENV !== "production" ? invariant(false, 'Missing field `%` in resolver response.', fieldName) : invariant(false) : void 0;
      }
    } else {
      // By default we will pass the full set of the fragment data to the resolver
      return resolverFn(data, args);
    }
  };
}
module.exports = resolverDataInjector;